# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: MSBuild

on:
  push:
    branches: [ "buildtest" ]
  pull_request:
    branches: [ "master" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release
  VCPKG_DEFAULT_TRIPLET: x64-windows-release

permissions:
  contents: read

jobs:
  build-dss:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Install Visual Leak Detector
      run: |
        curl -o vld.zip https://raw.githubusercontent.com/markmac99/DSS/refs/heads/buildtest/BuildPkgs/vld.zip
        mkdir "c:\program files (x86)\Visual Leak Detector"
        expand-archive vld.zip -destinationpath "c:\program files (x86)\Visual Leak Detector"
        # dir "c:\program files (x86)\Visual Leak Detector"
      shell: powershell
      
    - name: Install Qt
      uses: jurplel/install-qt-action@v4.1.0
      with:
        version: '6.8.2'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        install-deps: 'true'
        modules: 'qtcharts'
        setup-python: 'false'

    - name: Install boost
      uses: MarkusJx/install-boost@v2.4.5
      id: install-boost
      with:
        boost_version: 1.80.0
        boost_install_dir: c:\boost_180
        link: shared
        platform_version: 2022
        toolset: msvc
      
    - name: Install QT VS Plugin Support for MSBuild
      run: |
        curl -o qtmsbuild.zip https://raw.githubusercontent.com/markmac99/DSS/refs/heads/buildtest/BuildPkgs/QtMsBuild.zip
        expand-archive qtmsbuild.zip -destinationpath d:\buildpkgs\
      shell: powershell

    - name: setup and install vcpkg packages
      uses: lukka/run-vcpkg@v11
      id: vcpkg
      with:
        runVcpkgInstall: True
        #vcpkgDirectory: d:\vcpkg\
        #runVcpkgFormatString: '[`install`, `--recurse`, `--clean-after-build`, `--x-install-root`, `d:\\vcpkg_installed`, `--triplet`, `$[env.VCPKG_DEFAULT_TRIPLET]`]'
      env:
        VCPKG_INSTALLED_DIR: "${{ github.workspace }}\\vcpkg\\installed"

    - name: Build DSS Release Version
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: |
        $env:QtMsBuild="d:\buildpkgs\QtMsBuild"
        $env:QtToolsPath="${{ env.QT_ROOT_DIR }}\bin"
        $env:VCPKG_INSTALLED_DIR="${{ github.workspace }}\vcpkg\installed\${{ env.VCPKG_DEFAULT_TRIPLET }}"
        msbuild -m -p:Configuration=${{env.BUILD_CONFIGURATION}} -target:DeepSkyStacker
      shell: powershell
      env:
        DefaultQtVersion: "${{env.QT_ROOT_DIR}}"
        BOOST_1_80_0: ${{ steps.install-boost.outputs.BOOST_ROOT }}
        
    - name: Upload Build
      uses: actions/upload-artifact@v4
      id: upload-dss
      with:
        name: dss_binary
        path: ${{ github.workspace }}/x64/${{env.BUILD_CONFIGURATION}}/DeepSkyStacker.exe
        overwrite: true
  
    - name: Output artifact ID
      run:  echo 'Artifact URL is ${{ steps.upload-dss.outputs.artifact-url }}'        